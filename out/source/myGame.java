/* autogenerated by Processing revision 1289 on 2022-12-24 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class myGame extends PApplet {





int i = 0 ,  score=0 , count = 0;     int c, colorDurationInSeconds=5;
int margin = 100,     textSize =15, buttomBoxColor =150, playTime = 0; 
boolean lock = true;


player b = new player();
pillar[] p = new pillar[3];


boolean intro = true;  // キープレスでスタ－ト画面
boolean start = true;  // game starts
boolean isHit = false; // collision detection + ぶつかったらTRUEになる
boolean end   = false; // TRUEになったらゲーム終了

public void setup(){
  /* size commented out by preprocessor */;
  
  PFont font = createFont("Meiryo", 50);//日本語
  textFont(font);//日本語
  
  for(int i = 0;i<3;i++){
    p[i]=new pillar(i);
  }
}

public void draw(){
  
  if(start){
  playTime=(int)millis()/1000;
  back();
  screen();
  bottom();
  } 

  
  // //if(start=false){
  // saveFrame( sketchPath()+"\\frame\\"+"frame.png" );
  // PImage Image = loadImage(sketchPath()+"\\frame\\"+"frame.png");
  // image( Image ,0,0 );
  // //}
  cross();
  

}

public void back(){
  
    //background(150,157,186);//背景の色
  //background(c1,c2,c3);
  background(c);
  int s = ((int)millis())/1000;
  
  if( s == i ){
    c = color( ((int)random(0,255)) , 
               ((int)random(0,255)) , ((int)random(0,255)) );
    i=i+colorDurationInSeconds;
  }
   

}
public void bottom(){

  fill(buttomBoxColor);
  rect(0,height-margin,width,margin);
  
  fill(0, 408, 612, 816);
  textSize(textSize);
  text(  "W or SPACE to Jump", 50 , ( height - ( margin / 2 ) ) );

  text(  "P to Pause/Continue", 50+200 , ( height - ( margin / 2 ) ) );

  text(  "C for Cross", 50 , ( height - ( margin / 2 ) )+20 );

  text(  "E for Something", 50+200 , ( height - ( margin / 2 ) )+20 );

  text(  "PlayTime:"+ playTime, 50+400 , ( height - ( margin / 2 ) )+20 );

}
boolean crossing=false;

public void cross(){
  
//pause&play method
  if(crossing){

    line(mouseX,0,mouseX,height);
    line(0,mouseY,width,mouseY);
    stroke(255);
    text("X:"+mouseX+" Y:"+mouseY,140,50);
  }
}
 public void endScreen(){
   //black textbox
  rect(width/2-225, 100, 450, 70); //game start / end
  rect(width/2-150, 500, 350, 50);
  fill(255);
  stroke(255);
  background(50);

  //turn on to activate cross
  //cross();
  
  textSize(70);
  text("ゲーム・オーバー", width/2-275, 145);  //game end
  
  //score + score variable
  fill(255);
  stroke(255);
  
  textSize(20);
  text("スコア", width/2-100, 350);
  text(score, width/2+80, 350);
  
  //playtime counting
  text("プレイタイム", width/2-100, 380);
  text(  playTime, width/2+80, 380);
  
   // click to restart button
  fill(255);
  text("---クリックで再プレイ---", 285, 538); 
}
public void keyPressed(){
  switch( key ) {
    
    case ' ': case 'w' : b.jump();//キー割り当て
    intro=false;//キーを押すとintroがtrueからfalseになり
                //falseになったらbirdクラスのjumpが動く
     //停止状態
    if(end==false){ reset(); }
    break;
    
    case 'e': case 'E' : b.invi();
    isHit=false;
    if(end==false){
      reset();
    }
    break;
  
    case 'p': case 'P' : pause();
    isHit=false;
    if(end==false){
      reset();
    }
    break;
  
    // get x,y position cross on the screen
    case 'c': case 'C' : if(crossing){crossing=false;}else{crossing=true;};
    isHit=false;
    if(end==false){
      reset();
    }
    break;
  
  }
}
public void mousePressed(){
  b.jump(); //マウスのどこを押しても
  intro=false;
  if(end==false){
    reset();
  }
}
//pause&play method
int pauseRect_Xsize=600, pauseRect_Ysize=600;
int pauseRect_Xpos=100, pauseRect_Ypos = 100;
boolean looping=true;
public void pause(){
  if(looping){start=false;looping=false;}else{ start=true;looping=true;}
  
  //pause rect box
  fill(50);
  rect(pauseRect_Xpos,pauseRect_Ypos,pauseRect_Xsize,pauseRect_Ysize);

  // Continue Button
  textSize(50);  
  textAlign(CENTER);
  fill(0, 408, 612, 816);
  
  text("Continue", pauseRect_Xpos + (pauseRect_Xsize/2) ,
                   pauseRect_Ypos + (pauseRect_Ysize/2) );
  textAlign(LEFT);

  
  
}
//障害物の壁
class pillar{
  float xPos, wallSpace;
  boolean cashed = false;
  pillar(int i){
    xPos = 200+(i*280);//棒と棒の間隔が狭まる(1)
    wallSpace = random(400)+100;//壁が出てくる範囲(上)
  }
  public void drawPillar(){
  line(xPos,0,xPos,wallSpace-100);//壁のない範囲
  line(xPos,wallSpace+100,xPos,800);//壁のない範囲、
  }
  
  public void checkPosition(){
    
    if(xPos<0){
      xPos+=(280*3);//棒と棒の間隔が広がる(1)
      wallSpace = random(400)+100;//壁が出てくる範囲(下)
      cashed=false;
    }
    
    if(xPos<250&&cashed==false){//
      cashed=true;
      score=score+1;//スコアの追加する点数
    }
  }
}

public void reset(){
  end=true;
  score=0;//スコアの初期値は0
  b.yPos=100;//ボールの開始位置
  for(int i = 0;i<3;i++){
    p[i].xPos+=550;//スタートから壁が出てくるまでの範囲
    p[i].cashed = false;
  }
}
class player{
  float xPos,yPos,ySpeed;
  player(){
    xPos = 300;//タイトル画面のプレイヤーのx軸  // player x co-ordinates
    yPos = 340;//タイトル画面のプレイヤーのy軸  // player y co-ordinates
  }
  public void drawplayer(){
    stroke(255);
    noFill();
    strokeWeight(2);
    ellipse(xPos,yPos,20,20);//操作キャラの大きさ
  }
  public void jump(){
    ySpeed=-3;//ジャンプで上がる高さ
  }
  public void drag(){
    ySpeed+=0.2f;//落ちる速さ
  }
  public void move(){
    yPos+=ySpeed; 
    for(int i = 0;i<3;i++){   // i = no.of walls
      p[i].xPos-=3;//スクロールスピード   //game speed
    }
  }
  //
  public void invi(){
    if (intro && count == 0) {
    // 当たったときの処理
    count = 30; // 無敵時間をセット  //invincible period in seconds
  }

  if (count > 0) {
    xPos = 0;
    --count;
    if (count <= 0) {
      // 無敵時間の終わり //invincible period
      count = 0;
      intro = false;
      } 
    }
  }
  
  //  collision
  public void checkCollisions(){
   if(yPos>800){
     end=false;
   }
   
   //↓当たり判定  //  collision
   for(int i = 0;i<3;i++){                         // p == pillar
     if((xPos<p[i].xPos+10 && xPos>p[i].xPos-10)  // 10 pixel before and after piller
         &&(yPos<p[i].wallSpace-100||yPos>p[i].wallSpace+100)){  // 
     end=false;
     }
   }
  }
}
public void screen() {

  if(end) {
    b.invi();
    b.move();
    b.drag();
  }

  b.drawplayer();
  if(end) {
  }

  b.checkCollisions();
  for (int i = 0; i < 3; i++) {
    p[i].drawPillar();
    p[i].checkPosition();
  }
  fill(0);
  stroke(255);
  textSize(32);


  if(end) {
    
    rect(20, 20, 100, 50);//初めの座標～終わりの座標
    fill(255);
    text(score, 30, 58);//"文字",ｘ,ｙ座標

  } else {
    
    if (intro) {
        
        startScreen();
    }
    else{
        
        endScreen();
        
    }
  }
}
 public void startScreen(){
  //black textbox
  
  rect(width/2-225, 100, 450, 70); //game start / end
  rect(width/2-150, 500, 350, 50);
  
  fill(255);
  stroke(255);
  
  background(50);
  //lines();
  
  textSize(70);
  text("ボールゲーム", width/2-200, 145);
  
  textSize(20);
  text("---クリックで開始---", width/2-100, 538);
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "myGame" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
